public class lab6 {
    public static void main(String[] args) {
        Helmet h = new Helmet(35, 115, "Helmet");
        Armor a = new Armor(25, 200, "Life Jacket");
        Shield s = new Shield(10, 110, "Shield");
        Munitions[] munitions = { h, a, s };
        System.out.println("Cost set of munition: "
                + Munitions.cost(munitions));
        Munitions.sortedByWeight(munitions);
        System.out.println("Cost of shields:");
        for (int i = 0; i < munitions.length; i++) {
            System.out.print(munitions[i].getWeight() + " ");
            }
        System.out.println();
        Munitions d[];
        d = Munitions.priceRange(munitions, 0, 500);
        System.out.println("Cost of life jackets:");
        for (int i = 0; i < d.length; i++) {
            System.out.print(d[i].getPrice() + " ");
        }
        }
}


public class Shield extends Munitions {

        public Shield(int w, int p, String m) {
            super(w, p, m);
        }
}



public class Armor extends Munitions {

        public Armor(int w, int p, String m) {
            super(w, p, m);
        }
}



public class Helmet extends Munitions {

        public Helmet(int w, int p, String m) {
            super(w, p, m);
        }
}



public class Munitions {

        private int weight;
        private int price;
        private String material;


        public int getWeight() {
            return weight;
        }


        public void setWeight(int weight) {
            this.weight = weight;
        }


        public int getPrice() {
            return price;
        }


        public void setPrice(int price) {
            this.price = price;
        }

        public String getMaterial() {
            return new String(material);
        }

        public void setMaterial(String material) {
            this.material = new String(material);
        }

        public Munitions(int w, int p, String m) {
            setWeight(w);
            setPrice(p);
            setMaterial(m);
        }



        public Munitions(Munitions obj) {
            setWeight(obj.getWeight());
            setPrice(obj.getPrice());
            setMaterial(obj.getMaterial());
        }

        public static int cost(Munitions[] m) {
            int price = 0;
            for (int i = 0; i < m.length; i++) {
                price = price + m[i].getPrice();
            }
            return price;
        }

        public static void sortedByWeight(Munitions[] m) {
            Arrays.sort(m, new Comparator<Munitions>() {
                @Override
                public int compare(Munitions m1, Munitions m2) {
                    return m1.getWeight() - m2.getWeight();
                }
            });
        }



        public static Munitions[] priceRange(Munitions[] m, int a, int b) {
            int length = 0;
            for (int i = 0; i < m.length; i++) {
                if (m[i].getPrice() >= a && m[i].getPrice() <= b) {
                    length++;
                }
            }

            Munitions[] m1 = new Munitions[length];
            for (int i = 0; i < m.length; i++) {
                if (m[i].getPrice() >= a && m[i].getPrice() <= b) {
                    m1[i] = m[i];
                }
            }

            if (length == 0) {
                return null;
            } else {
                return m1;
            }
        }
}
