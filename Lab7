package com.company;


import java.util.Iterator;
import com.company.Flower.Flower;

public class lab7 implements Iterator&lt;Flower&gt; {

        private Flower a[];

        private int count;

        private int point;


public MyIterator(Flower[] a, int count){

            this.a = a;

            this.count = count;

            point = 0;

}



        public boolean hasNext() {

            if (point&gt;=count) return false; else

            return true;

        }



        public Flower next() {

            if (hasNext()) return a[point++]; else

                return null;

        }

        

        public void remove() {

            if (point&lt;count){

                System.arraycopy(a, point+1, a, point, count-point-1);

                count-- ;

            }

        }

    }
}



public class Flower { 
    private final Object Hrizantema;


        private int freshness;



        private double length;



        private int price;



        private String nameOfFlower;



        private int MAX_FRESHNESS = 5;



        private double MAX_LENGTH = 100;



        private int MAX_PRICE = 120;



        public int getFreshness(){

            return freshness;

        }



        public double getLength(){

            return length;

        }



        public int getPrice(){

            return price;

        }



        public String getNameOfFlower(){

            return nameOfFlower;

        }



        public void setFreshness(int f){

            if (f & lt; = MAX_FRESHNESS){

                freshness = f;

            }

        }



        public void setLength(double l){

            if (l &lt;= MAX_LENGTH){

                length = l;

            }

        }



        public void setPrice(int p){

            if (p &lt;= MAX_PRICE){

                price = p;

            }

        }



        public void setNameOfFlower(String fl){

            nameOfFlower = fl;

        }


        public Flower(){

            freshness = 5;

            length = 25.5;

            price = 100;

            nameOfFlower = &quot;Hrizantema&quot;;

            Hrizantema = null;
        }

        public Flower(int f, double l, int p){

            if (f &lt;= MAX_FRESHNESS) freshness = f;

            if (l &lt;= MAX_LENGTH) length = l;

            if (p &lt;= MAX_PRICE) price = p;

            nameOfFlower = &quot;Hrizantema&quot;;

        }

        public int bouquetTotalPrice(){

            int totalPrice = getPrice();

            return totalPrice;

        }

}



package com.company.Bouquet;


import com.company.Flower.Flower;
import com.company.MyCollection.MyCollection;

public class Bouquet {
        public static String printFlowerParametrs(Flower f){

            return &quot;Flower \&quot;&quot; + f.getNameOfFlower() + &quot;\&quot; cost &quot; + f.getPrice() + &quot;

            UAH&quot; + &quot;, her length is &quot; + f.getLength() + &quot; cm&quot; + &quot;, her freshness is &quot; +

                    f.getFreshness() + &quot; days.&quot;;

        }
        

        public static void outputArray(MyCollection bouquet){

            for (int i = 0; i &lt; bouquet.size(); i++){

                System.out.println(printFlowerParametrs(bouquet.get(i)));

            }

        }


        public static Flower searchByFlowerLength(MyCollection bouquet, double

                length1, double length2){

            Flower result = bouquet.get(0);

            for (int i = 0; i &lt; bouquet.size(); i++){

                if (bouquet.get(i).getLength() &gt;= length1 &amp;&amp;

                bouquet.get(i).getLength() &lt;= length2)

                result = bouquet.get(i);

            }

            return result;

        }
        

        public static int totalBouquetPrice(MyCollection bouquet) {

            int totalPrice = 0;

            for (int i = 0; i &lt; bouquet.size(); i++) {

                totalPrice += bouquet.get(i).getPrice();

            }

            System.out.println(&quot;Total bouquet price: &quot; + totalPrice + &quot; UAH&quot;);

            return totalPrice;

        }
        

        public static void sortByFreshness(MyCollection bouquet, int k) {

            System.out.println(&quot;Bouquet is sorted by decrision of freshness:&quot;);

            Flower buf;

            for (int i = 0; i &lt;= k - 1; i++) {

                for (int j = 0; j &lt;= k - 1; j++) {

                    if (bouquet.get(i).getFreshness() &gt;

                    bouquet.get(j).getFreshness()) {

                        buf = bouquet.get(i);

                        bouquet.set(i,bouquet.get(j));

                        bouquet.set(j,buf);

                    }

                }

            }

        }
        

        public static void main(String[] args) {

            final int count = 7;

            MyCollection bouquet=new MyCollection();

            bouquet.add (new Rose(3,50.5,80));

            bouquet.add (new Rose(4,49.6,80));

            bouquet.add (new Rose(3,48.0,80));

            bouquet.add (new Orchid(2,28.3,120));

            bouquet.add (new Orchid(2,27.9,110));

            bouquet.add (new Lily(1,15.4,50));

            bouquet.add (new Rose());
            

            System.out.println(&quot;Bouqeot consist of:&quot;);

            outputArray(bouquet);
            

            System.out.println();

            sortByFreshness(bouquet, count);

            outputArray(bouquet);
            
            System.out.println();

            System.out.println(&quot;Serched Flower by length:&quot;);

            System.out.println(printFlowerParametrs(searchByFlowerLength(bouquet,

                    27.0, 28.0)));

            System.out.println();

            totalBouquetPrice(bouquet);

        }
    }



public class Orchid extends Flower {
    

        public Orchid(){

            super();

            setNameOfFlower(&quot;Orchid&quot;);

        }

        public Orchid(int f, double l, int p){

            super(f, l, p);

            setNameOfFlower(&quot;Orchid&quot;);

        }

}


public class Rose extends Flower {


        public Rose(){

            super();

            setNameOfFlower(&quot;Rose&quot;);

        }

        public Rose(int f, double l, int p){

            super(f, l, p);

            setNameOfFlower(&quot;Rose&quot;);

        }

}


public class Lily extends Flower {


        public Lily(){

            super();

            setNameOfFlower(&quot;Lily&quot;);

        }

        public Lily(int f, double l, int p){

            super(f, l, p);

            setNameOfFlower(&quot;Lily&quot;);

        }

}



package com.company.MyCollection;


import java.util.Arrays;

import java.util.Collection;

import java.util.Iterator;

import java.util.List;

import java.util.ListIterator;

public class MyCollection implements List&lt;Flower&gt; {

        private Object[] elements; // Массив из объектов.

        private int size; // Количество добавленных эллементов в массив.

        private Flower[] a = new Flower[15] ; // Объект для итератора.

        private int count = 0; // Значение счётчика для итератора.


public MyCollection() {

            elements = new Flower[15];
            size = 0;
        }
        

public MyCollection(MyCollection o) {
            this();
            size++;
            elements[0] = o;
        }



public MyCollection(Collection&lt;Flower&gt; c) {
            elements = c.toArray();
            size = elements.length;
            checkCapacity(15);
        }

        

        public boolean add(Flower o) {
            if (o != null &amp;&amp; contains(o)) {
                checkCapacity(size + 1);
                elements[size] = o;
                size++;
                return true;
            }
    else
            {
                return false;
            }
        }


        

        public void add(int index, Flower o) {

            checkCapacity(index + 1);

            System.arraycopy(elements, index, elements, index + 1, size - index);

            elements[index] = o;

            size++;

        }



        public boolean addAll(Collection&lt;? extends Flower&gt; c) {

            Object[] a = c.toArray();

            checkCapacity(size + a.length);

            System.arraycopy(a, 0, elements, size, a.length);

            return a.length != 0;

        }
        

        public boolean addAll(int index, Collection&lt;? extends Flower&gt; c) {

            int newSize = size()+c.size();

            Object[] tmpArray = c.toArray();

            for(int i=0; i&lt;tmpArray.length; i++){

                add(index, (Flower) tmpArray[i]);

                index++;

            }

            return newSize==size();

        }




        public void clear() {

            for (int i = 0; i &lt; size; i++)

            elements[i] = null;

            size = 0;

        }


        public boolean contains(Object o) {

            int i = 0;

            while ((i &lt; size) &amp;&amp; (elements[i] != o))

            i++;

            if (i == size)

                return true;

            return false;

        }



        public boolean containsAll(Collection&lt;?&gt; c) {

            Object[] a = c.toArray();

            for (int i = 0; i &lt; a.length; i++)

            if (contains(a[i]) == false)

                return false;

            return true;

        }



        public Flower get(int index) {

            return (Flower) elements[index];

        }



        public int indexOf(Object o) {

            for (int i = 0; i &lt; size; i++) {

                if (o.equals(elements[i]))

                    return i;

            }

            return -1;

        }


        public boolean isEmpty() {

            return size() == 0;

        }



        public int lastIndexOf(Object o) {

            int checkIndex = -1;

            if (o != null) {

                for (int i = 0; i &lt; size(); i++) {

                    if (o.equals(elements[i])) {

                        checkIndex = i;

                    }

                    elements[i] = elements[i+1];

                }

                return checkIndex;

            }

            return -1;

        }



        public boolean remove(Object o) {

            int i = 0;

            while (o != elements[i])

                i++;

            if (i == 0)

                return false;

            int numMoved = size - i - 1;

            if (numMoved &gt; 0)

            System.arraycopy(elements, i + 1, elements, i, numMoved);

            elements[--size] = null;

            return true;

        }


        public Flower remove (int index) {

            int numMoved = size - index - 1;

            if (numMoved &gt; 0)

            System.arraycopy(elements, index + 1, elements, index, numMoved);

            elements[--size] = null;

            return null;

        }



        public boolean removeAll(Collection&lt;?&gt; c) {

            Object[] a = c.toArray();

            boolean check = false;

            for (int i = 0; i &lt; a.length; i++) {

                remove(a[i]);

                if (remove(a[i]))

                    check = true;

            }

            return check;

        }



        public boolean retainAll(Collection&lt;?&gt; c) {

            Object[] a = c.toArray();

            boolean check = false;

            for (int i = 0; i &lt; a.length; i++)

            if (contains(a[i]) == false) {

                remove(a[i]);

                if (remove(a[i]))

                    check = true;

            }

            return check;

        }



        public Flower set (int index, Flower o) {

            if (checkCapacity(index) &amp;&amp; elements[index] == null)

            size++;

            elements[index] = o;

            return o;

        }


        @Override

        public int size() {

            return size;

        }



        private boolean checkCapacity(int takenCapacity) {

            int oldCapacity = elements.length;

            if (takenCapacity &gt; oldCapacity) {

                int newCapacity = oldCapacity + (oldCapacity * (int)0.3);

                if (newCapacity &lt; takenCapacity)

                newCapacity = takenCapacity;

                elements = Arrays.copyOf(elements, newCapacity);

                return true;

            }

            return false;

        }



        public List&lt;Flower&gt; subList(int fromIndex, int toIndex) {

            MyCollection deposit = new MyCollection();

            List&lt;Flower&gt; ar = deposit.subList(1,4);

            System.out.println(&quot;Мини-коллекция&quot; + ar);

            return deposit;

        }



        public Object[] toArray() {

            return Arrays.copyOf(elements, size);

        }



        public &lt;T&gt; T[] toArray(T[] a) {

            if (a.length &lt; size)

            return (T[]) Arrays.copyOf(elements, size, a.getClass());

            System.arraycopy(elements, 0, a, 0, size);

            if (a.length &gt; size)

            a[size] = null;

            return a;

        }



        public Iterator&lt;Flower&gt; iterator() {

            return new MyIterator(a,count);

        }



        public ListIterator&lt;Flower&gt; listIterator() {

            return listIterator();

        }



        public ListIterator&lt;Flower&gt; listIterator(int g) {

            return listIterator(g);

        }

}



